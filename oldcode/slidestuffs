

    /**
     * performs half a contracted slide.
     * NOTE: This redefines Aloupis' contracted slide by only moving the bottom
     * layer of the sliding moduel
     */
    public void performContractedHalfSlide(Module m, Unit u1, Unit u2, Unit u3,
                                 int dir, int neighborDir, int step) {
        List <Unit> mSide = m.getSideUnits(neighborDir);
        Unit trailing = m.getUnitInQuadrant(neighborDir, opposite(dir));
        Unit leading  = m.getUnitInQuadrant(neighborDir, dir);
        Edge leadingEdge;
        Edge trailingEdge;
        
        //TODO REMOVE
        step = step % 5;
    
        switch(step) {
            case 0:
                leadingEdge = leading.getEdge(neighborDir);
                unitGraph.removeEdge(leadingEdge);
                unitGraph.addEdge(trailing, u1, neighborDir);
                leading.disconnect(opposite(neighborDir));
                break;
            case 1:
                trailing.extend(dir);
                break;
            case 2:
                trailingEdge = trailing.getEdge(neighborDir);
                unitGraph.addEdge(leading, u3, neighborDir);
                unitGraph.removeEdge(trailingEdge);
                break;
            case 3:
                trailing.contract(dir);
                break;
            case 4:
                unitGraph.addEdge(trailing, u2, neighborDir);
                leading.connect(opposite(neighborDir));
                break;
            default:
                System.out.println("OMG");
                break;
        }
    }
    public void performExpandedHalfSlide(Module m, Unit u1, Unit u2, Unit u3,
                                 int dir, int neighborDir, int step) {
        List <Unit> mSide = m.getSideUnits(neighborDir);
        Unit trailing = m.getUnitInQuadrant(neighborDir, opposite(dir));
        Unit leading  = m.getUnitInQuadrant(neighborDir, dir);
        Edge leadingEdge;
        Edge trailingEdge;
        //TODO REMOVE
        step = step % 5;
        switch(step) {
            case 0:
                unitGraph.removeEdge(leading.getEdge(neighborDir));
                unitGraph.addEdge(trailing, u1, neighborDir, true);
                u1.disconnect(neighborDir);
                u2.disconnect(neighborDir);
                u1.disconnect(opposite(dir));

                break;
            case 1:
                u1.contract(dir);
                u2.contract(dir);
                break;
            case 2:
                trailingEdge = trailing.getEdge(neighborDir);
                unitGraph.addEdge(leading, u3, neighborDir, true);
                unitGraph.removeEdge(trailingEdge);
                break;
            case 3:
                u1.extend(dir);
                u2.extend(dir);
                break;
            case 4:
                unitGraph.addEdge(trailing, u2, neighborDir, true);
                u1.connect(neighborDir);
                u2.connect(neighborDir);
                u1.connect(opposite(dir));
                break;
            default:
                System.out.println("OMG");
                break;
        }
    }

    public void performHalfSlide(Module m, Unit u1, Unit u2, Unit u3, int dir,
                                 int neighborDir, int step, boolean expanded) {
        if (expanded) {
            performExpandedHalfSlide(m, u1, u2, u3, dir, neighborDir, step);
        } else {
            performContractedHalfSlide(m, u1, u2, u3, dir, neighborDir, step);
        }
    }

    /**
     * Performs slide operations in 10 steps.
     * Assumptions made:
     * 1) all modules are in a contracted state between move phases
     * 2) module size is 2
     * 3) dir and neighbor are adjacent directions
     *
     * 1) must have edges between them (not necessarily connected)
     *
     * Slides can be made in parallel on the same module
     *
     * @param M             Module to slide
     * @param dir           Direction to slide module
     * @param neighborDir   Direction of neighboring modules to slide against
     */
    private void performSlide(Module m, int dir, int neighborDir, boolean expanded) {
        Module m2 = (Module) m.getNeighbor(neighborDir);
        Module m3 = (Module) m2.getNeighbor(dir);
        print(String.format("neighbordir %d", neighborDir));
        print (String.format("Dir is %d", dir));
        Unit u1 = m2.getUnitInQuadrant(opposite(neighborDir), opposite(dir));
        Unit u2 = m2.getUnitInQuadrant(opposite(neighborDir), dir);
        Unit u3 = m3.getUnitInQuadrant(opposite(neighborDir), opposite(dir));
        Unit u4 = m3.getUnitInQuadrant(opposite(neighborDir), dir);
        print(String.format("u1 %d", u1.getId()));
        print(String.format("u2 %d", u2.getId()));
        print(String.format("u3 %d", u3.getId()));
        print(String.format("u4 %d", u4.getId()));
        for (int step = 0; step < 10; step++) {
            if (step < 5) {
                performHalfSlide(m, u1, u2, u3, dir, neighborDir, step, expanded);
            } else{ 
                performHalfSlide(m, u2, u3, u4, dir, neighborDir, step, expanded);
            }
            drawUnit();
        }

        //updating module graph
        moduleGraph.removeEdge(m.getEdge(neighborDir));
        moduleGraph.addEdge(m, m3, neighborDir);
        drawModule();
    }

    /**
     * Performs a unit slide if possible on a module in a given direction.
     *
     * @param M         Module to slide, note type Module not Node
     * @param dir       direction to slide relative to rest of robot
     *
     * @return          Slide status, returns true if performed successfully
     */
    public boolean slide(Module m, int dir, boolean expanded) {
        int neighborDir = getNeighborDir(m, dir);
        return slide(m, dir, neighborDir, expanded);
    }

    public boolean slide(Module m, int dir, int neighborDir, boolean expanded) {
        if (neighborDir == -1) {
            System.out.println("ERROR SLIDE NOT POSSIBLE");
            return false;
        }
        performSlide(m, dir, neighborDir, expanded);
        return true;
    }
